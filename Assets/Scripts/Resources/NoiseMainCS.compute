
#include "processnoises.hlsl"
#include "dataobjects.hlsl"

#pragma kernel GenerateNoise


// Main Result
RWStructuredBuffer<float> noiseResults;

// Data
StructuredBuffer<NoiseData> noiseDataBuffer;
StructuredBuffer<NoiseFilter> noiseFilters;


// Other Data
int octaves;
int resolution;
float normalizer;


[numthreads(16, 16, 1)]
void GenerateNoise(uint3 id : SV_DispatchThreadID)
{
    // Get noise data and the index
    NoiseData noiseData = noiseDataBuffer[0];
    int x = (int) id.x;
    int y = (int) id.y;
    
    if (x >= noiseData.resolution || y >= noiseData.resolution)
    {
        return;
    }

    // Create and configure noise state and get the noiseData
    float amplitude = 1.0;
    float frequency = 1.0;
    float dataNormalizer = 0.;

    float endValue = 0.0;

    for (int oct = 0; oct < octaves; oct++)
    {
        NoiseFilter noiseFilter = noiseFilters[oct];
        
        float fOctNormalizer = 0.;
        float fFrequency = noiseFilter.frequency;
        float fAmplitude = noiseFilter.amplitude;
        
        float nfValue = 0.;
        for (int fOct = 0; fOct < noiseFilter.octaves; fOct++)
        {
            float3 sample = (float3(x, y, 0.0) * fFrequency * frequency / noiseFilter.scale) + noiseFilter.offset + random3(noiseFilter.seed + fOct) * 100.;
            
            // Domain warp
            if (noiseFilter.useDomainWarp)
            {
                sample = DoDomainWarp(sample, noiseFilter.dWNoiseType, noiseFilter.dWOctaves, noiseFilter.dWScale, noiseFilter.dWAmplitude, noiseFilter.dWFrequency, noiseFilter.dWPersistance, noiseFilter.dWLacunarity);
            }
            
            // Do noise
            float noiseValue = ProcessNoiseFilter(noiseFilter, noiseData, sample);
            
            nfValue += noiseValue * fAmplitude;

            fOctNormalizer += fAmplitude;
            fFrequency *= noiseFilter.lacunarity;
            fAmplitude *= noiseFilter.persistance;
        }
        if (fOctNormalizer > 0)
        {
            nfValue /= fOctNormalizer;
        }
        
        endValue += nfValue * amplitude;
        dataNormalizer += amplitude;
        
        amplitude *= noiseData.persistence;
        frequency *= noiseData.lacunarity;
    }
    endValue /= dataNormalizer;
    
    if (noiseData.invert)
    {
        endValue *= -1.0;
    }
    if (noiseData.normalize01)
    {
        endValue = endValue * .5 + .5;
    }
    noiseResults[x + y * noiseData.resolution] = endValue;
}
